<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on SinTan1071</title>
    <link>https://sintan1071.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on SinTan1071</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ryantyler423@gmail.com (SinTan1071)</managingEditor>
    <webMaster>ryantyler423@gmail.com (SinTan1071)</webMaster>
    <lastBuildDate>Fri, 24 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sintan1071.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>钱包开发的一些技术分享(二)</title>
      <link>https://sintan1071.github.io/posts/%E9%92%B1%E5%8C%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E4%BA%8C/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      <author>ryantyler423@gmail.com (SinTan1071)</author>
      <guid>https://sintan1071.github.io/posts/%E9%92%B1%E5%8C%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E4%BA%8C/</guid>
      <description>by SinTan1071
 之前说了下关于web3开发网页端钱包的一些技术分享，这一次简单聊一下钱包账户生成流程中的一些和账户有关的安全加密算法
熵（entropy） 这里的熵是Shannon信息论中一个重要概念。感兴趣的童鞋可以看看这篇文章以及这篇文章后面的参考资料 &amp;#x1F449; 点这里。
形式化地，一条消息 M 的信息量可通过它的熵来度量，表示为 H(M)。一条标示性别消息的熵是1位；一条表示一周天数消息的熵稍微小于3位。通常一条消息的熵是
log_2 n  n 是消息所有可能的值。一条消息的熵也表示了他的不确定性(uncertainty)，即当消息被加密成密文时，为了获取明文，需要解密的明文的位数。例如，如果密文是“QHP5M”要么是“男”，要么是“女”，那么次消息的不确定性是1.密码分析者为了恢复此消息，仅需选择1位。
通俗的解释：首先，信息熵是衡量随机变量分布的混乱程度，是随机分布各事件发生的信息量的期望值，随机变量的取值个数越多，状态数也就越多，信息熵就越大，混乱程度就越大。他主要的目的是为了描述的是随机变量的不确定性，所以可以用来衡量两个随机变量之间的相似度，一个熵值从压缩的角度来看，就是每个词平均要用几个位来编码，既然信息熵只反映内容的随机性（不确定性）和编码情况，与内容本身无关，想起了什么？我们通常所说的哈希，也是一种与内容本身无关，只反映内容的编码情况的散列，好的，现在我们去思考这样一个东西，我们取得的一串随机序列，这一串序列可以是一些随机的词汇，可以是一些随机的数字，那么假如一串随机词汇和某串随机数字每个词所需要的编码位数相等，我们就可以称他们之间熵等价
助记词 钱包账户的助记词使用bip39库，我们看一下bip39库的源码，生成助记词的方法
// bip39.generateMnemonic() function generateMnemonic (strength, rng, wordlist) { strength = strength || 128 if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY) rng = rng || randomBytes return entropyToMnemonic(rng(strength / 8), wordlist) }   该方法接受三个参数
 第一个参数 strength 表示随机序列的位数(bits)，这个参数之后会除以8转成字节数(bytes)
 第二个参数rng是获取伪随机序列的方法，这个方法是randombytes包中的方法，该方法返回一个双字节的序列，就是说randombytes这个方法首先根据传入的参数去创建一个相应长度的序列数组，然后再给该序列的每一位随机赋值一个16进制的双字节数据，也就是16位(bits)，用这个随机序列作为同等熵值的随机助记词一个一对一的唯一标识，我们使用默认的 strength = 128 来举例，那么randombytes(16) 会返回一个长度为16的双字节数组，大概长这样&amp;mdash;[Buffer a9 fc 96 8e 72 68 94 66 1b f3 71 c4 91 74 5b c6]</description>
    </item>
    
    <item>
      <title>钱包开发的一些技术分享</title>
      <link>https://sintan1071.github.io/posts/%E5%BC%80%E5%8F%91%E7%BD%91%E9%A1%B5%E7%AB%AF%E9%92%B1%E5%8C%85%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      <author>ryantyler423@gmail.com (SinTan1071)</author>
      <guid>https://sintan1071.github.io/posts/%E5%BC%80%E5%8F%91%E7%BD%91%E9%A1%B5%E7%AB%AF%E9%92%B1%E5%8C%85%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/</guid>
      <description>by SinTan1071
 最近在做一个以太坊钱包，通过前期了解，这个以太坊钱包需要适用于移动端，而且移动端APP全部使用VUE混合开发，所以这个钱包的语言选择也就走向了JavaScript的怀抱。
概念  首先介绍下区块链钱包的概念，用户能看到的，一般都有助记词、私钥、账户余额、转账记录、转账功能等。助记词和私钥都是需要用户自己备份的。助记词可帮助用户找回私钥，而私钥可生成用户的地址。私钥与地址一一对应，地址是用户的唯一标识，用户的所有钱都是存放在地址里面。如果丢失了用户地址，丢失了私钥，助记词也忘了，那么很遗憾，该账户的钱也就没发用了。 “地址”类似于“银行卡号”，“密码”类似于“银行卡密码”、“私钥”可以生成“银行卡号”、“助记词”可以找回“私钥”、“Keystore”是指加密私钥、“Keystore”+“密码”可以找到私钥。  开发  首先，我们需要有个可以获取以太坊数据的入口，这就需要一个以太坊的节点，一开始我想使用geth去自己打一个节点，但是由于需要同步块，而且块的数据很多很多，需要花很长很长时间，所以果断放弃并且开始寻找新的方法，在前辈老师的推荐下，选择了infura，注册了infura，获得了API的KEY，然后通过web3试了一下，可以调用了  var Web3 = require(&amp;#39;web3&amp;#39;); if (typeof web3 !== &amp;#39;undefined&amp;#39;) { web3 = new Web3(web3.currentProvider); } else { web3 = new Web3(new Web3.providers.HttpProvider(&amp;#34;https://rinkeby.infura.io/6e4c0183d45e45d681bc94da2b751801&amp;#34;)); } console.log(web3.version);   接下来一个比较重要的东西就是生成账户，以及账户的助记词，助记词使用bip39库，生成助记词之后使用该助记词作为生成用户账户私钥的种子，然后再由keythereum去生成以太坊的账户的keystore，其中有几个需要注意的点是，我们使用的bip39生成的助记词为12个单词，这12个单词通过bip39提供的获取种子的方法生成的哈希串长度为128，而keythereum生成以太坊账户的参数要求传入一个长度为64的哈希串作为私钥，那么我们需要自行处理这个bip39生成的128位哈希串，为了方便以后可以去用密码来查看助记词，所以我这里用了bip39中的一个获取等价熵的方法，该熵的值是一个长度为32的哈希串，所以我在这里使用这个助记词的熵加上助记词生成的种子的前32位拼接起来，作为以太坊账户的私钥，最后生成符合标准的keystore，Keystore会存储在使用的设备里，这样每次登录只用输入相应密码即可。Keystore是私钥经过加密过后的一个文件，需要用户设置的密码才能打开文件。即使keystore文件被盗，只要用户设置的密码够长够随机，短时间内私钥也不会泄露，有充足的时间转移地址里的数字资产到其他地址。  let password = &amp;#39;xxxxxxxxxxx&amp;#39; let words = bip39.generateMnemonic() // 在生成助记词的过程中，首先生成长度为128〜256位(bits)的随机序列(熵)，以128位为例； // 取熵SHA256哈希后的前n位作为校验和 (n = 熵长度/32)，然后随机序列(熵) + 校验和拼合为一个字符串， // 把得到的结果每11位切割，通过每个字符串匹配预先定义的2048 个词库里的单词就得到了助记词串， // 同样mnemonicToEntropy这个方法可以导出当前助记词的熵的sha256哈希（这在之后通过熵来恢复助记词）， // 我们这里把熵+助记词哈希后的种子拼接成符合keythereum参数要求的64位私钥 let privateKey = bip39.</description>
    </item>
    
  </channel>
</rss>